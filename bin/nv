#!/usr/bin/env bash

#
# Setup.
#
VERSION="2.1.8"
N_PREFIX=${N_PREFIX-/usr/local}
BASE_VERSIONS_DIR=$N_PREFIX/nv/versions

#
# Log <type> <msg>
#
log() {
  printf "  \033[36m%10s\033[0m : \e[2m%s\e[22m\033[0m\n" "$1" "$2"
}

#
# Exit with the given <msg ...>
#
abort() {
  printf "\n  \033[31mError: $@\033[0m\n\n" && exit 1
}

BIN="node"
MIRROR=${NODE_MIRROR-https://nodejs.org/dist/}
VERSIONS_DIR=$BASE_VERSIONS_DIR

#
# Ensure we have curl or wget support.
#
CURL_PARAMS=( "-L"
              "-#")

WGET_PARAMS=( "--no-check-certificate"
              "-q"
              "-O-")

if [ -n "$HTTP_USER" ];then
  if [ -z "$HTTP_PASSWORD" ]; then
    abort "Must specify HTTP_PASSWORD when supplying HTTP_USER"
  fi
  CURL_PARAMS+=("-u $HTTP_USER:$HTTP_PASSWORD")
  WGET_PARAMS+=("--http-password=$HTTP_PASSWORD"
                "--http-user=$HTTP_USER")
elif [ -n "$HTTP_PASSWORD" ]; then
  abort "Must specify HTTP_USER when supplying HTTP_PASSWORD"
fi

GET=

# wget support
command -v wget > /dev/null && GET="wget ${WGET_PARAMS[@]}"

command -v curl > /dev/null && GET="curl ${CURL_PARAMS[@]}"

test -z "$GET" && abort "curl or wget required"

#
# State
#
LOCAL=0
ARCH=

#
# Install and setup nv
#
install_nv() {
  echo "Running NV for the first time. I will setup up everything for you."
  echo "Creating the versions folder, will need sudo for this:"
  sudo mkdir -p "$VERSIONS_DIR"
  sudo chown -R "$(id -un)":"$(id -gn)" "$N_PREFIX/nv"
}

#
# set_arch <arch> to override $(uname -a)
#
set_arch() {
  if test ! -z "$1"; then
    ARCH=$1
  else
    abort "missing -a|--arch value"
  fi
}

#
# Output usage information.
#
display_help() {
  cat <<-EOF

  Usage: nv [options/env] [COMMAND] [args]

  Environments:
    nv [COMMAND] [args]            Uses default env (node)
    nv project [COMMAND]           Uses custom env-variables to use non-official sources

  Commands:

    nv                              Display help information
    nv init                         Setup your environment
    nv latest                       Install or activate the latest node release
    nv stable                       Install or activate the latest stable node release
    nv lts                          Install or activate the latest LTS node release
    nv <version>                    Install node <version>
    nv use <version> [args ...]     Execute node <version> with [args ...]
    nv rm <version ...>             Remove the given version(s)
    nv prune                        Remove all versions except the current version
    nv --latest                     Output the latest node version available
    nv --stable                     Output the latest stable node version available
    nv --lts                        Output the latest LTS node version available
    nv ls                           Output the versions of node available

  Options:

    -V, --version   Output current version of n
    -h, --help      Display help information
    -d, --download  Download only

  Aliases:

    which   bin
    use     as
    list    ls
    -       rm

EOF
}

err_no_installed_print_help() {
  printf "\n  \033[31mError: no installed version\033[0m\n"
  exit 1
}


#
# Output n version.
#
display_n_version() {
  echo $VERSION && exit 0
}

#
# Display sorted versions directories paths.
#
versions_paths() {
  find $BASE_VERSIONS_DIR -maxdepth 2 -type d \
    | sed 's|'$BASE_VERSIONS_DIR'/||g' \
    | egrep "/[0-9]+\.[0-9]+\.[0-9]+$" \
    | sort -k 1,1 -k 2,2n -k 3,3n -t .
}

#
# Check if the HEAD response of <url> is 200.
#
is_ok() {
  if command -v curl > /dev/null; then
    $GET -Is $1 | head -n 1 | grep 200 > /dev/null
  else
    $GET -S --spider 2>&1 $1 | head -n 1 | grep 200 > /dev/null
  fi
}

#
# Check if the OSS(Object Storage Service) mirror is ok.
#
is_oss_ok() {
  if command -v curl > /dev/null; then
    if $GET -Is $1 | head -n 1 | grep 302 > /dev/null; then
      is_oss_ok $GET -Is $1 | grep Location | awk -F ': ' '{print $2}'
    else
      $GET -Is $1 | head -n 1 | grep 200 > /dev/null
    fi
  else
    if $GET -S --spider 2>&1 $1 | head -n 1 | grep 302 > /dev/null; then
      is_oss_ok $GET -S --spider 2>&1 $1 | grep Location | awk -F ': ' '{print $2}'
    else
      $GET -S --spider 2>&1 $1 | head -n 1 | grep 200 > /dev/null
    fi
  fi
}

#
# Determine tarball url for <version>
#
tarball_url() {
  local version=$1
  local uname="$(uname -a)"
  local arch=x86
  local os=

  # from nave(1)
  case "$uname" in
    Linux*) os=linux ;;
    Darwin*) os=darwin ;;
    SunOS*) os=sunos ;;
  esac

  case "$uname" in
    *x86_64*) arch=x64 ;;
    *armv6l*) arch=armv6l ;;
    *armv7l*) arch=armv7l ;;
  esac

  if [ ${arch} = "armv6l" -a $BIN = node ]; then
    local semver=${version//./ }
    local major=$(echo $semver | grep -o -E '[0-9]+' | head -1 | sed -e 's/^0\+//')
    local minor=$(echo $semver | awk '{print $2}' | grep -o -E '[0-9]+' | head -1 | sed -e 's/^0\+//')
    [[ $major -eq "" && $minor -lt 12 ]] && arch=arm-pi
  fi

  [ ! -z $ARCH ] && arch=$ARCH

  echo "${MIRROR}v${version}/$BIN-v${version}-${os}-${arch}.tar.gz"

}

#
# Disable PaX mprotect for <binary>
#
disable_pax_mprotect() {
  test -z $1 && abort "binary required"
  local binary=$1

  # try to disable mprotect via XATTR_PAX header
  local PAXCTL=$(PATH="/sbin:/usr/sbin:$PATH" which paxctl-ng 2>&1)
  local PAXCTL_ERROR=1
  if [ -x "$PAXCTL" ]; then
    $PAXCTL -l && $PAXCTL -m "$binary" >/dev/null 2>&1
    PAXCTL_ERROR="$?"
  fi

  # try to disable mprotect via PT_PAX header
  if [ $PAXCTL_ERROR != 0 ]; then
    PAXCTL=$(PATH="/sbin:/usr/sbin:$PATH" which paxctl 2>&1)
    if [ -x "$PAXCTL" ]; then
      $PAXCTL -Cm "$binary" >/dev/null 2>&1
    fi
  fi
}

#
# Activate <version>
#
activate() {
  local version=$1
  local dir=$BASE_VERSIONS_DIR/$version
  if test "$LOCAL" == 1; then
    echo $version > "$PWD/.node-version"
  else
    echo $version > "$HOME/.node-version"
  fi
  disable_pax_mprotect "$N_PREFIX/bin/node"
}

#
# Install latest version.
#
install_latest() {
  install $(display_latest_version)
}

#
# Install latest stable version.
#
install_stable() {
  install $(display_latest_stable_version)
}

#
# Install latest LTS version.
#
install_lts() {
  install $(display_latest_lts_version)
}

#
# Install <version>
#
install() {
  local version=${1#v}

  local dots=$(echo $version | sed 's/[^.]*//g')
  if test ${#dots} -lt 2; then
    version=$($GET 2> /dev/null $MIRROR \
      | egrep "</a>" \
      | egrep -o '[0-9]+\.[0-9]+\.[0-9]+' \
      | egrep -v '^0\.[0-7]\.' \
      | egrep -v '^0\.8\.[0-5]$' \
      | sort -u -k 1,1n -k 2,2n -k 3,3n -t . \
      | egrep ^$version \
      | tail -n1)

    test $version || abort "invalid version ${1#v}"
  fi

  local dir=$VERSIONS_DIR/$version

  if test -d $dir; then
    if [[ ! -e $dir/n.lock ]] ; then
      activate $version
      exit
    fi
  fi

  echo
  log install $BIN-v$version

  local url=$(tarball_url $version)
  is_ok $url || is_oss_ok $url || abort "invalid version $version"

  log mkdir $dir
  mkdir -p $dir
  if [ $? -ne 0 ] ; then
    abort "sudo required"
  else
    touch $dir/n.lock
  fi

  cd $dir

  log fetch $url
  $GET $url | tar -zx --strip-components=1
  rm -f $dir/n.lock

  disable_pax_mprotect bin/node

  activate $version
  echo
}

#
# Remove <version ...>
#
remove_versions() {
  test -z "$1" && abort "version(s) required"
  
  while test $# -ne 0; do
    local version=${1#v}
    rm -rf "$VERSIONS_DIR/$version"
    echo "Removing $version"
    shift
  done
}

#
# Prune non-active versions
#
prune_versions() {
  for version in $(versions_paths); do
    rm -rf $BASE_VERSIONS_DIR/$version
    echo "Removing $version"
    shift
  done
}

#
# Display the latest release version.
#
display_latest_version() {
  $GET 2> /dev/null $MIRROR \
    | egrep "</a>" \
    | egrep -o '[0-9]+\.[0-9]+\.[0-9]+' \
    | egrep -v '^0\.[0-7]\.' \
    | egrep -v '^0\.8\.[0-5]$' \
    | sort -u -k 1,1n -k 2,2n -k 3,3n -t . \
    | tail -n1
}

#
# Display the latest stable release version.
#
display_latest_stable_version() {
  $GET 2> /dev/null $MIRROR \
    | egrep "</a>" \
    | egrep -o '[0-9]+\.[0-9]*[02468]\.[0-9]+' \
    | sort -u -k 1,1n -k 2,2n -k 3,3n -t . \
    | tail -n1
}

#
# Display the latest lts release version.
#
display_latest_lts_version() {
  local folder_name=$($GET 2> /dev/null $MIRROR \
    | egrep "</a>" \
    | egrep -o 'latest-[a-z]{2,}' \
    | sort \
    | tail -n1)

  $GET 2> /dev/null $MIRROR/$folder_name/ \
    | egrep "</a>" \
    | egrep -o '[0-9]+\.[0-9]+\.[0-9]+' \
    | head -n1
}

#
# Display the versions available.
#
display_remote_versions() {
  local versions=""
  versions=$($GET 2> /dev/null $MIRROR \
    | egrep "</a>" \
    | egrep -o '[0-9]+\.[0-9]+\.[0-9]+' \
    | sort -u -k 1,1n -k 2,2n -k 3,3n -t . \
    | awk '{ print "  " $1 }')

  echo
  local bin=$BIN
  for v in $versions; do
    if test "$active" = "$bin/$v"; then
      printf "  \033[36mÎ¿\033[0m $v \033[0m\n"
    else
      if test -d $BASE_VERSIONS_DIR/$bin/$v; then
        printf "    $v \033[0m\n"
      else
        printf "    \e[2m$v\e[22m\n"
      fi
    fi
  done
  echo
}

#
# Sets up the $PATH
#
init_bin() {
  if [ "$1" == "" ]
  then 
    local shell_config=""
    if [ "$(echo "$SHELL" | grep bash)" != "" ]
    then
      shell_config="~/.bash_profile"
    elif [ "$(echo "$SHELL" | grep zsh)" != "" ]
    then
      shell_config="~/.zshrc"
    fi
    echo "Add the following in your $shell_config"
    echo
    echo "eval \$(nv init -)"
  else
    echo "export PATH=/Users/andrei/Code/nv/bin:$PATH"
  fi
}

test -d "$VERSIONS_DIR" || install_nv

#
# Handle arguments.
#
if test $# -eq 0; then
  display_help
else
  while test $# -ne 0; do
    case $1 in
      -V|--version) display_n_version ;;
      -h|--help|help) display_help; exit ;;
      --latest) display_latest_version; exit ;;
      --stable) display_latest_stable_version; exit ;;
      --lts) display_latest_lts_version; exit ;;
      -a|--arch) shift; set_arch "$1";; # set arch and continue
      -l|--local) LOCAL=1 ;;
      init) init_bin $2; exit ;;
      rm|-) shift; remove_versions "$@"; exit ;;
      prune) prune_versions; exit ;;
      latest) install_latest; exit ;;
      stable) install_stable; exit ;;
      lts) install_lts; exit ;;
      ls|list) display_remote_versions; exit ;;
      *) install "$1"; exit ;;
    esac
    shift
  done
fi
